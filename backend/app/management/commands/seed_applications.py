from django.core.management.base import BaseCommand
import random
from faker import Faker

from app.models import Application, JobPosting, CV  # ƒë·ªïi app.models th√†nh app ch·ª©a models c·ªßa b·∫°n

class Command(BaseCommand):
    help = "T·∫°o d·ªØ li·ªáu Application (·ª©ng tuy·ªÉn) ng·∫´u nhi√™n cho m·ªói JobPosting"

    def handle(self, *args, **kwargs):
        fake = Faker("vi_VN")

        cvs = list(CV.objects.all())
        if not cvs:
            self.stdout.write(self.style.ERROR("‚ùå Kh√¥ng c√≥ CV n√†o trong h·ªá th·ªëng"))
            return

        job_postings = JobPosting.objects.all()
        if not job_postings.exists():
            self.stdout.write(self.style.ERROR("‚ùå Kh√¥ng c√≥ JobPosting n√†o trong h·ªá th·ªëng"))
            return

        total_apps = 0

        for job in job_postings:
            # random s·ªë l∆∞·ª£ng CV apply cho job n√†y
            num_applications = random.randint(0, len(cvs))
            chosen_cvs = random.sample(cvs, num_applications) if num_applications > 0 else []

            for cv in chosen_cvs:
                app, created = Application.objects.get_or_create(
                    job_posting=job,
                    cv=cv,
                    defaults={
                        "is_cancel": False,
                        "status": random.choice([s[0] for s in Application.ApplicationStatus.choices])
                    }
                )
                if created:
                    total_apps += 1

            self.stdout.write(self.style.SUCCESS(
                f"üíº Job '{job.title}' nh·∫≠n {num_applications} h·ªì s∆°"
            ))

        self.stdout.write(self.style.SUCCESS(f"üéâ ƒê√£ t·∫°o t·ªïng c·ªông {total_apps} ·ª©ng tuy·ªÉn"))
